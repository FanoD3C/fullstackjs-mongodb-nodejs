{"version":3,"file":"js/bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACsD;AACtD,6BAA6B,6DAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,EAAE;;;;;;;;;;;;;;AC9CjB,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,kBAAkB,GAAG,OAAO;AAC1E;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;ACjDf;;;;;;;;;;;;ACAA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA,CAAyB;AACU;AACnC;AACA;AACsB;AACtB;AACA;AACA;AACA;AACA;AACA,wBAAwB,2CAAE;AAC1B;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2CAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,G","sources":["webpack://fullstackjs-mongodb-nodejs/./frontend/UI.js","webpack://fullstackjs-mongodb-nodejs/./frontend/services/BookService.js","webpack://fullstackjs-mongodb-nodejs/./frontend/styles/app.css?8b59","webpack://fullstackjs-mongodb-nodejs/./frontend/styles/bootstrap.min.css?1bf2","webpack://fullstackjs-mongodb-nodejs/webpack/bootstrap","webpack://fullstackjs-mongodb-nodejs/webpack/runtime/define property getters","webpack://fullstackjs-mongodb-nodejs/webpack/runtime/hasOwnProperty shorthand","webpack://fullstackjs-mongodb-nodejs/webpack/runtime/make namespace object","webpack://fullstackjs-mongodb-nodejs/./frontend/app.js"],"sourcesContent":["//manejo dle DOM + renderizar desde el app.js = intereactua con el navegador web\r\n\r\n// importar el BookServices\r\nimport ClassBookService from \"./services/BookService\";\r\nconst classBookService = new ClassBookService();\r\n\r\nclass UI{\r\n    //metodo que pinta todos los libros por pantalla\r\n    async renderBooks(){\r\n        //para renderizar los datos, se debe consultar primero los datos\r\n        //los datos se obtiene desde la clase getBook dentro del archivo BookService.js\r\n        const bookRender = await classBookService.getBook();\r\n\r\n        //con este DOM pintaremos en pantalla el libro\r\n        document.getElementById('books-cards');\r\n\r\n        // con este console log probamos el codigo por consola/terminal\r\n        console.log(bookRender);\r\n\r\n    }\r\n\r\n    //metodo que agrega nuevos libros por pantalla\r\n    async addNewBook(book){\r\n        await classBookService.postBoook(book);\r\n\r\n        // con este this, lo que hago es llamar al metodo para que se ejecute el codigo y resetear el formulario\r\n        this.clearBookForm();\r\n    }\r\n    \r\n    //metodo que elimina los libros por pantalla\r\n    deleteBookUI(){\r\n\r\n    }\r\n\r\n    //metodo que limpia el formulario\r\n    clearBookForm(){\r\n        // limpia lo que se ingreso en el formulario\r\n        document.getElementById('book-form').reset();\r\n    }\r\n\r\n    //metodo que render un texto\r\n    renderMessagez(){\r\n\r\n    }\r\n}\r\n\r\nexport default UI;","// const { response } = require(\"express\");\r\n\r\n// esta clase se reutilizara, la llamamos cuando sea necesario desde el DOM\r\n\r\nclass ClassBookService {\r\n    constructor(){\r\n        this.URI_API_BOOK = \"http://localhost:3000/api/books\"\r\n    }\r\n    \r\n    //meotodos para utilizar en esta app de libros\r\n\r\n    // obtener datos\r\n    async getBook(){\r\n        // con fetch hacemos una peticion a mi URI, sin una conversion, es decir datos crudos\r\n        const responseGet = await fetch(this.URI_API_BOOK);\r\n        \r\n        //con responseGet.json obtenemos el dato legible en un json y ahora esta convertido\r\n        const books = await responseGet.json();\r\n        return books;\r\n    }\r\n\r\n    // guardamos los datos\r\n    // los datos son entregados a postBook desde los datos obtenidos en getBook\r\n    async postBoook(book){\r\n        //\r\n        const responsePost = await fetch(this.URI_API_BOOK,{\r\n            method: 'POST',\r\n            body: book\r\n        });\r\n\r\n        const data = await responsePost.json();\r\n        // con este console log veemos que datos estamos capturando\r\n        console.log(data)\r\n    }\r\n\r\n    //borramos los datos\r\n    async deleteBook(bookId){\r\n        const responseDelete = await fetch(`${this.URI_API_BOOK}/${bookId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        })\r\n        const dataDelete = await responseDelete.json();\r\n        console.log(dataDelete);\r\n    }\r\n\r\n}\r\n// exportamos la clase ClassBookService del archivo BookService.js para poder usarse en otro archivo js \r\nexport default ClassBookService","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","alert(\"Esta corriendo\")\r\n// aqui importamos la clase getBook postBook deleteBook desde el archivo BookService del backend \r\n// ahora este import lo tomamos desde UI.js\r\n// import ClassBookService from './services/BookService'\r\n\r\n//desde aqui se requiere el codigo del css usando webpack y js \r\nimport './styles/app.css'\r\nimport './styles/bootstrap.min.css'\r\n\r\n//importamos la clase UI\r\nimport UI from './UI';\r\n\r\n//usamos un evento que capturamos los datos que estan desde la clase UI en el archivo UI.js\r\n//esto indica que una vez que cargue el DOM\r\ndocument.addEventListener('DOMContentLoaded', ()=> {\r\n    // instanciamos la clase UI desde el archivo UI.js\r\n    const uiClass = new UI();\r\n    //utilizamos su metodo renderBooks\r\n    uiClass.renderBooks();\r\n})\r\n\r\n\r\n//usamos el dom del formulario\r\ndocument.getElementById('book-form')\r\n//indicamos el evento submit \r\n.addEventListener( 'submit', e => {\r\n    //.value guarda el valor \r\n    const title = document.getElementById(\"title\").value;\r\n    const author = document.getElementById(\"author\").value;\r\n    const isbn = document.getElementById(\"isbn\").value;\r\n    //.files guarda el archivo\r\n    const image = document.getElementById(\"image\").files;\r\n\r\n    //crear un objeto con los datos necesarios para poder enviarlo, estos datos son: titulo,autor,isbn,image\r\n    const formData = new FormData();\r\n    formData.append('image', image[0]);\r\n    formData.append('title', title);\r\n    formData.append('author', author);\r\n    formData.append('isbn', isbn);\r\n\r\n    console.log(title + author + isbn + image)\r\n    // cunado se instancia una clase se debe almacenar en otra variable\r\n    \r\n    //instanciamos UI \r\n    const uiClass = new UI();\r\n    uiClass.addNewBook(formData);\r\n    \r\n    // COMENTAMOS ESTE CODIGO PORQUE AHORA ESTOY USANDO LAS CLASES QUE SE IMPORTARON DESDE UI.js\r\n    // ahora bookService tiene todos los metodos que estan en ClassBookService();\r\n    //agregando formData en postBook vemos que datos estamos mandando a guardar despues de apretar el boton submit\r\n    // bookService.postBoook(formData)\r\n\r\n    //no se reinicia la pagina al tipear el boton\r\n    e.preventDefault();\r\n});\r\n\r\n// rut 13 329 279 9\r\n// "],"names":[],"sourceRoot":""}