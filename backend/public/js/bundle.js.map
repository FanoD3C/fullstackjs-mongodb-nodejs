{"version":3,"file":"js/bundle.js","mappings":"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","sources":["webpack://fullstackjs-mongodb-nodejs/./node_modules/timeago.js/esm/lang/en_US.js","webpack://fullstackjs-mongodb-nodejs/./node_modules/timeago.js/esm/lang/zh_CN.js","webpack://fullstackjs-mongodb-nodejs/./node_modules/timeago.js/esm/register.js","webpack://fullstackjs-mongodb-nodejs/./node_modules/timeago.js/esm/utils/date.js","webpack://fullstackjs-mongodb-nodejs/./node_modules/timeago.js/esm/index.js","webpack://fullstackjs-mongodb-nodejs/./frontend/UI.js","webpack://fullstackjs-mongodb-nodejs/./frontend/services/BookService.js","webpack://fullstackjs-mongodb-nodejs/./node_modules/timeago.js/esm/format.js","webpack://fullstackjs-mongodb-nodejs/./frontend/app.js"],"sourcesContent":["var EN_US = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'];\nexport default function (diff, idx) {\n    if (idx === 0)\n        return ['just now', 'right now'];\n    var unit = EN_US[Math.floor(idx / 2)];\n    if (diff > 1)\n        unit += 's';\n    return [diff + \" \" + unit + \" ago\", \"in \" + diff + \" \" + unit];\n}\n//# sourceMappingURL=en_US.js.map","var ZH_CN = ['秒', '分钟', '小时', '天', '周', '个月', '年'];\nexport default function (diff, idx) {\n    if (idx === 0)\n        return ['刚刚', '片刻后'];\n    var unit = ZH_CN[~~(idx / 2)];\n    return [diff + \" \" + unit + \"\\u524D\", diff + \" \" + unit + \"\\u540E\"];\n}\n//# sourceMappingURL=zh_CN.js.map","/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\n/**\n * All supported locales\n */\nvar Locales = {};\n/**\n * register a locale\n * @param locale\n * @param func\n */\nexport var register = function (locale, func) {\n    Locales[locale] = func;\n};\n/**\n * get a locale, default is en_US\n * @param locale\n * @returns {*}\n */\nexport var getLocale = function (locale) {\n    return Locales[locale] || Locales['en_US'];\n};\n//# sourceMappingURL=register.js.map","/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [\n    60,\n    60,\n    24,\n    7,\n    365 / 7 / 12,\n    12,\n];\n/**\n * format Date / string / timestamp to timestamp\n * @param input\n * @returns {*}\n */\nexport function toDate(input) {\n    if (input instanceof Date)\n        return input;\n    // @ts-ignore\n    if (!isNaN(input) || /^\\d+$/.test(input))\n        return new Date(parseInt(input));\n    input = (input || '')\n        // @ts-ignore\n        .trim()\n        .replace(/\\.\\d+/, '') // remove milliseconds\n        .replace(/-/, '/')\n        .replace(/-/, '/')\n        .replace(/(\\d)T(\\d)/, '$1 $2')\n        .replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n        .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n    return new Date(input);\n}\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns\n */\nexport function formatDiff(diff, localeFunc) {\n    /**\n     * if locale is not exist, use defaultLocale.\n     * if defaultLocale is not exist, use build-in `en`.\n     * be sure of no error when locale is not exist.\n     *\n     * If `time in`, then 1\n     * If `time ago`, then 0\n     */\n    var agoIn = diff < 0 ? 1 : 0;\n    /**\n     * Get absolute value of number (|diff| is non-negative) value of x\n     * |diff| = diff if diff is positive\n     * |diff| = -diff if diff is negative\n     * |0| = 0\n     */\n    diff = Math.abs(diff);\n    /**\n     * Time in seconds\n     */\n    var totalSec = diff;\n    /**\n     * Unit of time\n     */\n    var idx = 0;\n    for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n        diff /= SEC_ARRAY[idx];\n    }\n    /**\n     * Math.floor() is alternative of ~~\n     *\n     * The differences and bugs:\n     * Math.floor(3.7) -> 4 but ~~3.7 -> 3\n     * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\n     *\n     * More information about the performance of algebraic:\n     * https://www.youtube.com/watch?v=65-RbBwZQdU\n     */\n    diff = Math.floor(diff);\n    idx *= 2;\n    if (diff > (idx === 0 ? 9 : 1))\n        idx += 1;\n    return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\n}\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param relativeDate\n * @returns {number}\n */\nexport function diffSec(date, relativeDate) {\n    var relDate = relativeDate ? toDate(relativeDate) : new Date();\n    return (+relDate - +toDate(date)) / 1000;\n}\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\nexport function nextInterval(diff) {\n    var rst = 1, i = 0, d = Math.abs(diff);\n    for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n        diff /= SEC_ARRAY[i];\n        rst *= SEC_ARRAY[i];\n    }\n    d = d % rst;\n    d = d ? rst - d : rst;\n    return Math.ceil(d);\n}\n//# sourceMappingURL=date.js.map","/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nimport en_US from './lang/en_US';\nimport zh_CN from './lang/zh_CN';\nimport { register } from './register';\nregister('en_US', en_US);\nregister('zh_CN', zh_CN);\nexport { format } from './format';\nexport { render, cancel } from './realtime';\nexport { register };\n//# sourceMappingURL=index.js.map","//manejo dle DOM + renderizar desde el app.js = intereactua con el navegador web\r\n\r\n// importar el BookServices\r\nimport ClassBookService from \"./services/BookService\";\r\nconst classBookService = new ClassBookService();\r\n\r\n//importamos el modulo timeago.js\r\nimport {format} from 'timeago.js'\r\n\r\nclass UI{\r\n    //metodo que pinta todos los libros por pantalla\r\n  async renderBooks() {\r\n\r\n    // obtenemos los datos con getBook mediante su API\r\n    const bookRender = await classBookService.getBook();\r\n\r\n    // pintamos las cartas\r\n    const booksCardContainer = document.getElementById('books-cards');\r\n    booksCardContainer.innerHTML = '';\r\n\r\n    //recorremos los datos para poder insertar la nueva carta\r\n    bookRender.forEach(book => {\r\n\r\n        // creamos el div en donde insertaremos los datos desde el backend\r\n        const div = document.createElement('div');\r\n        div.className = '';\r\n\r\n        // ahora creamos el cuerpo del cual colocaremos los datos\r\n        div.innerHTML = `\r\n            <div class=\"card m-2\" > \r\n                <div class=\"row\">\r\n                    <div class=\"col-md-6\">\r\n                        <img src=\"${book.imagePath}\" alt='' class=\"image-fluid img-center-responsive\">\r\n                    </div>\r\n                    <div class=\"col-md-6\">\r\n                        <div class=\"card-block px-2\">\r\n                            <h3>${book.title}</h4>\r\n                            <p class=\"card-text\">${book.author}</p>\r\n                            <a href='#' class=\"btn btn-danger delete\" _id=\"${book._id}\"> X </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"card-footer\">\r\n                    ${format(book.created_at)}\r\n            </div> \r\n        `;\r\n        // ahora insertamos las otras tarjetas faltantes desde el backend\r\n        booksCardContainer.appendChild(div)\r\n    });\r\n  }\r\n\r\n    //metodo que agrega nuevos libros por pantalla\r\n    async addNewBook(book){\r\n        await classBookService.postBoook(book);\r\n        // con este this lo que hago es llamar al metodo renderBook y asi traer los datos del backend\r\n        this.renderBooks()\r\n        \r\n        // con este this, lo que hago es llamar al metodo para que se ejecute el codigo y resetear el formulario\r\n        this.clearBookForm();\r\n        \r\n    }\r\n    \r\n    //metodo que limpia el formulario\r\n    clearBookForm(){\r\n        // limpia lo que se ingreso en el formulario\r\n        document.getElementById('book-form').reset();\r\n    }\r\n\r\n    // metodo que renderiza un texto \r\n    // parametros: message, colorMessage, removeSeg\r\n    renderMessage(message, colorMessage, removeSeg){\r\n\r\n        // creamos el div para mostrar el msj \r\n        const div = document.createElement('div');\r\n        \r\n        // pintamos el alert y le asignamos el message\r\n        div.className = `alert alert-${colorMessage} message`;\r\n        \r\n        // insertamos el texto dentro del div\r\n        div.appendChild(document.createTextNode(message));\r\n\r\n\r\n        const container = document.querySelector('.col-md-6')\r\n        const bookForm = document.getElementById('book-form');\r\n        \r\n        // selecciona \r\n        container.insertBefore(div, bookForm);\r\n        setTimeout(() => {\r\n\r\n            document.querySelector('.message').remove();\r\n        }, removeSeg);\r\n    }\r\n    \r\n    //metodo que elimina los libros por pantalla\r\n    async deleteBookUI(bookId){\r\n        // con esto eliminamos el libro\r\n        await classBookService.deleteBook(bookId);\r\n        //con esto actualizamos el libro\r\n        this.renderBooks();\r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default UI;","// const { response } = require(\"express\");\r\n// esta clase se reutilizara, la llamamos cuando sea necesario desde el DOM\r\n\r\nclass ClassBookService {\r\n    constructor(){\r\n        // development\r\n        // this.URI_API_BOOK = \"http://localhost:3000/api/books\";\r\n\r\n        // production\r\n        this.URI_API_BOOK = \"api/books\";\r\n    }\r\n    \r\n    //meotodos para utilizar en esta app de libros\r\n    // obtener datos\r\n    async getBook(){\r\n        // con fetch hacemos una peticion a mi URI, sin una conversion, es decir datos crudos\r\n        const responseGet = await fetch(this.URI_API_BOOK);\r\n        \r\n        //con responseGet.json obtenemos el dato legible en un json y ahora esta convertido\r\n        const books = await responseGet.json();\r\n        return books;\r\n    }\r\n\r\n    // guardamos los datos\r\n    // los datos son entregados a postBook desde los datos obtenidos en getBook\r\n    async postBoook(book){\r\n        //con etse metodo podemos guardar el libro\r\n        const responsePost = await fetch(this.URI_API_BOOK,{\r\n            method: 'POST',\r\n            body: book\r\n        });\r\n        // con data esperamos la repsuesta de los datos que estan en el back\r\n        const data = await responsePost.json();\r\n        // con este console log veemos que datos estamos capturando\r\n        // console.log(data)\r\n    }\r\n\r\n    //borramos los datos\r\n    async deleteBook(bookId){\r\n        //con este metodo eliminamos el libro - para eliminar el libro se debe indicar la URI y el bookid al backend \r\n        const responseDelete = await fetch(`${this.URI_API_BOOK}/${bookId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'Delete'\r\n        });\r\n        //aqui esperamos la respuesta del metodo\r\n        const dataDelete = await responseDelete.json();\r\n        console.log(dataDelete);\r\n    }\r\n    \r\n}\r\n// exportamos la clase ClassBookService del archivo BookService.js para poder usarse en otro archivo js \r\nexport default ClassBookService","import { formatDiff, diffSec } from './utils/date';\nimport { getLocale } from './register';\n/**\n * format a TDate into string\n * @param date\n * @param locale\n * @param opts\n */\nexport var format = function (date, locale, opts) {\n    // diff seconds\n    var sec = diffSec(date, opts && opts.relativeDate);\n    // format it with locale\n    return formatDiff(sec, getLocale(locale));\n};\n//# sourceMappingURL=format.js.map","alert(\"Esta corriendo\")\r\n// aqui importamos la clase getBook postBook deleteBook desde el archivo BookService del backend \r\n// ahora este import lo tomamos desde UI.js\r\n// import ClassBookService from './services/BookService'\r\n\r\n//desde aqui se requiere el codigo del css usando webpack y js \r\nimport './styles/app.css'\r\nimport './styles/bootstrap.min.css'\r\n\r\n//importamos la clase UI\r\nimport UI from './UI';\r\n\r\n//usamos un evento que capturamos los datos que estan desde la clase UI en el archivo UI.js\r\n//esto indica que una vez que cargue el DOM\r\ndocument.addEventListener('DOMContentLoaded', ()=> {\r\n    // instanciamos la clase UI desde el archivo UI.js\r\n    const uiClass = new UI();\r\n    //utilizamos su metodo renderBooks\r\n    uiClass.renderBooks();\r\n})\r\n\r\n\r\n//usamos el dom del formulario\r\ndocument.getElementById('book-form')\r\n//indicamos el evento submit \r\n.addEventListener( 'submit', e => {\r\n    \r\n    //.value guarda el valor \r\n    const title = document.getElementById(\"title\").value;\r\n    const author = document.getElementById(\"author\").value;\r\n    const isbn = document.getElementById(\"isbn\").value;\r\n    \r\n    //.files guarda el archivo\r\n    const image = document.getElementById(\"image\").files;\r\n\r\n    //crear un objeto con los datos necesarios para poder enviarlo, estos datos son: titulo,autor,isbn,image\r\n    const formData = new FormData();\r\n    formData.append('image', image[0]);\r\n    formData.append('title', title);\r\n    formData.append('author', author);\r\n    formData.append('isbn', isbn);\r\n\r\n    console.log(title + author + isbn + image)\r\n    // cunado se instancia una clase se debe almacenar en otra variable\r\n    \r\n    //instanciamos UI \r\n    const uiClass = new UI();\r\n    uiClass.addNewBook(formData);\r\n\r\n    //mostrar por pantalla el msj\r\n    uiClass.renderMessage('Nuevo Libro agregado', 'success', 3000)\r\n    \r\n    // COMENTAMOS ESTE CODIGO PORQUE AHORA ESTOY USANDO LAS CLASES QUE SE IMPORTARON DESDE UI.js\r\n    // ahora bookService tiene todos los metodos que estan en ClassBookService();\r\n    //agregando formData en postBook vemos que datos estamos mandando a guardar despues de apretar el boton submit\r\n    // bookService.postBoook(formData)\r\n\r\n    //no se reinicia la pagina al tipear el boton\r\n    e.preventDefault();\r\n});\r\n\r\ndocument.getElementById('books-cards')\r\n    .addEventListener('click', e => {\r\n        const uiClass = new UI();\r\n        \r\n        // si el elemento tiene la clase delete\r\n        if (e.target.classList.contains('delete')){\r\n            // probamos con un console\r\n            // console.log('eliminado');\r\n            // probamos con un console si tomamos el Id\r\n            // console.log(e.target.getAttribute('_id'));\r\n            \r\n            // deleteBookUI viene desde la clase importada UI\r\n            uiClass.deleteBookUI(e.target.getAttribute('_id'));\r\n\r\n\r\n            // los parametros de renderMessage vienen del importe de UI \r\n            // estos parametros son desde UI: (message, colorMessage, removeSeg)\r\n            uiClass.renderMessage('Libro Borrado', 'danger', 2000)\r\n            \r\n        }\r\n\r\n        // con esto evitamos que al eliminar un dato volvamos al inicio\r\n        e.preventDefault();\r\n    })"],"names":["EN_US","ZH_CN","Locales","register","locale","func","SEC_ARRAY","toDate","input","Date","isNaN","test","parseInt","trim","replace","diff","idx","unit","Math","floor","classBookService","constructor","this","URI_API_BOOK","async","responseGet","fetch","json","book","responsePost","method","body","bookId","responseDelete","headers","dataDelete","console","log","bookRender","getBook","booksCardContainer","document","getElementById","innerHTML","forEach","div","createElement","date","opts","sec","className","imagePath","title","author","_id","created_at","relativeDate","localeFunc","agoIn","totalSec","abs","length","toString","appendChild","postBoook","renderBooks","clearBookForm","reset","renderMessage","message","colorMessage","removeSeg","createTextNode","container","querySelector","bookForm","insertBefore","setTimeout","remove","deleteBook","alert","addEventListener","e","value","isbn","image","files","formData","FormData","append","uiClass","addNewBook","preventDefault","target","classList","contains","deleteBookUI","getAttribute"],"sourceRoot":""}